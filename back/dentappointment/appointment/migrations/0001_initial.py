# Generated by Django 4.2.6 on 2024-05-24 18:58

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Owner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=40, unique=True)),
                ('username', models.CharField(max_length=100)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CreateRegisBase',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('createregisbase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='appointment.createregisbase')),
                ('Name', models.CharField(max_length=100)),
                ('Last_name', models.CharField(max_length=100)),
                ('Second_last_name', models.CharField(blank=True, max_length=100)),
                ('Eage', models.CharField(blank=True, max_length=100)),
                ('Birth_date', models.DateField(blank=True, null=True)),
                ('Gender', models.CharField(blank=True, max_length=100)),
                ('Email', models.EmailField(blank=True, max_length=254)),
                ('PhoneNumber', models.CharField(max_length=100, unique=True)),
            ],
            bases=('appointment.createregisbase',),
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('createregisbase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='appointment.createregisbase')),
                ('name', models.CharField(max_length=100)),
                ('price', models.FloatField()),
                ('active', models.BooleanField(default=False)),
            ],
            bases=('appointment.createregisbase',),
        ),
        migrations.CreateModel(
            name='ConsultingRoom',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=100)),
                ('address', models.CharField(max_length=300)),
                ('webpage', models.URLField()),
                ('email', models.EmailField(max_length=254, null=True)),
                ('phone_number', models.CharField(max_length=10, null=True)),
                ('qr_code', models.ImageField(null=True, upload_to='consultingroom-qrcodes/')),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('id_owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Treatment',
            fields=[
                ('createregisbase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='appointment.createregisbase')),
                ('date', models.DateField(db_comment='Fecha en la que el tratamiento normal fue entregado/realizado', null=True)),
                ('note', models.CharField(max_length=100, null=True)),
                ('dental_aucense', models.CharField(max_length=100, null=True)),
                ('conserved_teeth', models.CharField(max_length=100, null=True)),
                ('absence_teeth', models.CharField(max_length=100, null=True)),
                ('teeth_to_replace', models.CharField(max_length=100, null=True)),
                ('prosthesis_type', models.CharField(max_length=100, null=True)),
                ('prosthesis_description', models.CharField(max_length=100, null=True)),
                ('observations', models.CharField(max_length=100, null=True)),
                ('updated_price', models.FloatField(null=True)),
                ('prosthesis_procedure', models.JSONField(db_comment='Configuracion en caso de que el tratamineto sea protesis', null=True)),
                ('id_patient', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='appointment.patient')),
                ('id_service', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='appointment.service')),
            ],
            bases=('appointment.createregisbase',),
        ),
        migrations.AddField(
            model_name='service',
            name='id_consultingRoom',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='appointment.consultingroom'),
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('createregisbase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='appointment.createregisbase')),
                ('contribution', models.CharField(max_length=50)),
                ('id_consultingRoom', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='appointment.consultingroom')),
                ('id_treatment', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='appointment.treatment')),
            ],
            bases=('appointment.createregisbase',),
        ),
        migrations.AddField(
            model_name='patient',
            name='id_consultingRoom',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='appointment.consultingroom'),
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('createregisbase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='appointment.createregisbase')),
                ('appointmentDate', models.DateField()),
                ('appointmentHour', models.TimeField(default=django.utils.timezone.now)),
                ('appointmentMotive', models.CharField(max_length=100)),
                ('firstTimePatient', models.BooleanField()),
                ('status', models.CharField(default='Programada', max_length=100)),
                ('id_consultingRoom', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='appointment.consultingroom')),
                ('id_patient', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='appointment.patient')),
                ('id_service', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='appointment.service')),
            ],
            bases=('appointment.createregisbase',),
        ),
    ]
